
/home/antonio/Atollic/TrueSTUDIO/ARM_workspace_8.0/Projeto Cronometro/Debug/Projeto Cronometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017c8  080017c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080017d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  20000020  080017f0  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000090  080017f0  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   000041b8  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ec1  00000000  00000000  00024201  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004c0  00000000  00000000  000250c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00025588  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001ae5  00000000  00000000  000259c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c15  00000000  00000000  000274a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000290ba  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000012c8  00000000  00000000  00029138  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080017b0 	.word	0x080017b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080017b0 	.word	0x080017b0

0800014c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000154:	2300      	movs	r3, #0
 8000156:	617b      	str	r3, [r7, #20]
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
 800015c:	230f      	movs	r3, #15
 800015e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d03a      	beq.n	80001de <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000168:	4b27      	ldr	r3, [pc, #156]	; (8000208 <NVIC_Init+0xbc>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	43db      	mvns	r3, r3
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	f003 0307 	and.w	r3, r3, #7
 8000174:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	f1c3 0304 	rsb	r3, r3, #4
 800017c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	fa22 f303 	lsr.w	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	461a      	mov	r2, r3
 800018e:	693b      	ldr	r3, [r7, #16]
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	4313      	orrs	r3, r2
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <NVIC_Init+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	6979      	ldr	r1, [r7, #20]
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	4413      	add	r3, r2
 80001b8:	460a      	mov	r2, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <NVIC_Init+0xc0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	095b      	lsrs	r3, r3, #5
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	f003 031f 	and.w	r3, r3, #31
 80001d2:	2101      	movs	r1, #1
 80001d4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001dc:	e00f      	b.n	80001fe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001de:	490b      	ldr	r1, [pc, #44]	; (800020c <NVIC_Init+0xc0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	2201      	movs	r2, #1
 80001f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f6:	f100 0320 	add.w	r3, r0, #32
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	371c      	adds	r7, #28
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800021c:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <EXTI_Init+0xe0>)
 800021e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	799b      	ldrb	r3, [r3, #6]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d04f      	beq.n	80002c8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000228:	4931      	ldr	r1, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022a:	4b31      	ldr	r3, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	43db      	mvns	r3, r3
 8000234:	4013      	ands	r3, r2
 8000236:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	492d      	ldr	r1, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	43db      	mvns	r3, r3
 8000244:	4013      	ands	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	791b      	ldrb	r3, [r3, #4]
 800024c:	461a      	mov	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	4413      	add	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	6811      	ldr	r1, [r2, #0]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000262:	4923      	ldr	r1, [pc, #140]	; (80002f0 <EXTI_Init+0xe0>)
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <EXTI_Init+0xe0>)
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	43db      	mvns	r3, r3
 800026e:	4013      	ands	r3, r2
 8000270:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	491f      	ldr	r1, [pc, #124]	; (80002f0 <EXTI_Init+0xe0>)
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <EXTI_Init+0xe0>)
 8000276:	68da      	ldr	r2, [r3, #12]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	43db      	mvns	r3, r3
 800027e:	4013      	ands	r3, r2
 8000280:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	795b      	ldrb	r3, [r3, #5]
 8000286:	2b10      	cmp	r3, #16
 8000288:	d10e      	bne.n	80002a8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800028a:	4919      	ldr	r1, [pc, #100]	; (80002f0 <EXTI_Init+0xe0>)
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <EXTI_Init+0xe0>)
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4313      	orrs	r3, r2
 8000296:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000298:	4915      	ldr	r1, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4313      	orrs	r3, r2
 80002a4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002a6:	e01d      	b.n	80002e4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <EXTI_Init+0xe0>)
 80002aa:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4413      	add	r3, r2
 80002b6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	6811      	ldr	r1, [r2, #0]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	e00d      	b.n	80002e4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	461a      	mov	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4413      	add	r3, r2
 80002d2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	6811      	ldr	r1, [r2, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	43d2      	mvns	r2, r2
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400

080002f4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <EXTI_GetITStatus+0x44>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4013      	ands	r3, r2
 800030c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <EXTI_GetITStatus+0x44>)
 8000310:	695a      	ldr	r2, [r3, #20]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4013      	ands	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d005      	beq.n	8000326 <EXTI_GetITStatus+0x32>
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000320:	2301      	movs	r3, #1
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	e001      	b.n	800032a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800032a:	7bfb      	ldrb	r3, [r7, #15]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400

0800033c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000344:	4a03      	ldr	r2, [pc, #12]	; (8000354 <EXTI_ClearITPendingBit+0x18>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6153      	str	r3, [r2, #20]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40010400 	.word	0x40010400

08000358 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000358:	b480      	push	{r7}
 800035a:	b089      	sub	sp, #36	; 0x24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	78db      	ldrb	r3, [r3, #3]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	2b00      	cmp	r3, #0
 800038e:	d005      	beq.n	800039c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	789b      	ldrb	r3, [r3, #2]
 8000394:	461a      	mov	r2, r3
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	4313      	orrs	r3, r2
 800039a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d044      	beq.n	8000430 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
 80003b0:	e038      	b.n	8000424 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80003b2:	2201      	movs	r2, #1
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4013      	ands	r3, r2
 80003c6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003c8:	693a      	ldr	r2, [r7, #16]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d126      	bne.n	800041e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003d6:	220f      	movs	r2, #15
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	43db      	mvns	r3, r3
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	4013      	ands	r3, r2
 80003e8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003ea:	69fa      	ldr	r2, [r7, #28]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	78db      	ldrb	r3, [r3, #3]
 80003fc:	2b28      	cmp	r3, #40	; 0x28
 80003fe:	d105      	bne.n	800040c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000400:	2201      	movs	r2, #1
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	409a      	lsls	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	e008      	b.n	800041e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	78db      	ldrb	r3, [r3, #3]
 8000410:	2b48      	cmp	r3, #72	; 0x48
 8000412:	d104      	bne.n	800041e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000414:	2201      	movs	r2, #1
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	409a      	lsls	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	3301      	adds	r3, #1
 8000422:	61bb      	str	r3, [r7, #24]
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	2b07      	cmp	r3, #7
 8000428:	d9c3      	bls.n	80003b2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	2bff      	cmp	r3, #255	; 0xff
 8000436:	d946      	bls.n	80004c6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
 8000442:	e03a      	b.n	80004ba <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	3308      	adds	r3, #8
 8000448:	2201      	movs	r2, #1
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4013      	ands	r3, r2
 800045a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800045c:	693a      	ldr	r2, [r7, #16]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	429a      	cmp	r2, r3
 8000462:	d127      	bne.n	80004b4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800046a:	220f      	movs	r2, #15
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	43db      	mvns	r3, r3
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	4013      	ands	r3, r2
 800047c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	4313      	orrs	r3, r2
 800048a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	78db      	ldrb	r3, [r3, #3]
 8000490:	2b28      	cmp	r3, #40	; 0x28
 8000492:	d105      	bne.n	80004a0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000494:	69bb      	ldr	r3, [r7, #24]
 8000496:	3308      	adds	r3, #8
 8000498:	2201      	movs	r2, #1
 800049a:	409a      	lsls	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	78db      	ldrb	r3, [r3, #3]
 80004a4:	2b48      	cmp	r3, #72	; 0x48
 80004a6:	d105      	bne.n	80004b4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	3308      	adds	r3, #8
 80004ac:	2201      	movs	r2, #1
 80004ae:	409a      	lsls	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	3301      	adds	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d9c1      	bls.n	8000444 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	697a      	ldr	r2, [r7, #20]
 80004c4:	605a      	str	r2, [r3, #4]
  }
}
 80004c6:	bf00      	nop
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2202      	movs	r2, #2
 80004e4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2204      	movs	r2, #4
 80004ea:	70da      	strb	r2, [r3, #3]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	460b      	mov	r3, r1
 8000500:	807b      	strh	r3, [r7, #2]
 8000502:	4613      	mov	r3, r2
 8000504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000506:	787b      	ldrb	r3, [r7, #1]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800050c:	887a      	ldrh	r2, [r7, #2]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000512:	e002      	b.n	800051a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000514:	887a      	ldrh	r2, [r7, #2]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	615a      	str	r2, [r3, #20]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000524:	b490      	push	{r4, r7}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	f003 0303 	and.w	r3, r3, #3
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	220f      	movs	r2, #15
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000548:	4916      	ldr	r1, [pc, #88]	; (80005a4 <GPIO_EXTILineConfig+0x80>)
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	089b      	lsrs	r3, r3, #2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <GPIO_EXTILineConfig+0x80>)
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	089b      	lsrs	r3, r3, #2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3302      	adds	r3, #2
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	1c83      	adds	r3, r0, #2
 8000568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <GPIO_EXTILineConfig+0x80>)
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	089b      	lsrs	r3, r3, #2
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461c      	mov	r4, r3
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <GPIO_EXTILineConfig+0x80>)
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	3302      	adds	r3, #2
 8000580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000584:	79f9      	ldrb	r1, [r7, #7]
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	f003 0303 	and.w	r3, r3, #3
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	431a      	orrs	r2, r3
 8000594:	1ca3      	adds	r3, r4, #2
 8000596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc90      	pop	{r4, r7}
 80005a2:	4770      	bx	lr
 80005a4:	40010000 	.word	0x40010000

080005a8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f003 030c 	and.w	r3, r3, #12
 80005c8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d007      	beq.n	80005e0 <RCC_GetClocksFreq+0x38>
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d009      	beq.n	80005e8 <RCC_GetClocksFreq+0x40>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d133      	bne.n	8000640 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a47      	ldr	r2, [pc, #284]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 80005dc:	601a      	str	r2, [r3, #0]
      break;
 80005de:	e033      	b.n	8000648 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a45      	ldr	r2, [pc, #276]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 80005e4:	601a      	str	r2, [r3, #0]
      break;
 80005e6:	e02f      	b.n	8000648 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80005e8:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80005f0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80005f2:	4b40      	ldr	r3, [pc, #256]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	3302      	adds	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d106      	bne.n	8000618 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	4a3b      	ldr	r2, [pc, #236]	; (80006fc <RCC_GetClocksFreq+0x154>)
 800060e:	fb02 f203 	mul.w	r2, r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000616:	e017      	b.n	8000648 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000618:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000620:	2b00      	cmp	r3, #0
 8000622:	d006      	beq.n	8000632 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	4a35      	ldr	r2, [pc, #212]	; (80006fc <RCC_GetClocksFreq+0x154>)
 8000628:	fb02 f203 	mul.w	r2, r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
      break;
 8000630:	e00a      	b.n	8000648 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 8000636:	fb02 f203 	mul.w	r2, r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	601a      	str	r2, [r3, #0]
      break;
 800063e:	e003      	b.n	8000648 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a2d      	ldr	r2, [pc, #180]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 8000644:	601a      	str	r2, [r3, #0]
      break;
 8000646:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000650:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <RCC_GetClocksFreq+0x158>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	40da      	lsrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000678:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000680:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <RCC_GetClocksFreq+0x158>)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	40da      	lsrs	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80006a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	0adb      	lsrs	r3, r3, #11
 80006a6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <RCC_GetClocksFreq+0x158>)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	0b9b      	lsrs	r3, r3, #14
 80006ce:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80006d0:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <RCC_GetClocksFreq+0x15c>)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	68da      	ldr	r2, [r3, #12]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	611a      	str	r2, [r3, #16]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	007a1200 	.word	0x007a1200
 80006fc:	003d0900 	.word	0x003d0900
 8000700:	20000000 	.word	0x20000000
 8000704:	20000010 	.word	0x20000010

08000708 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000726:	e006      	b.n	8000736 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000728:	4905      	ldr	r1, [pc, #20]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <RCC_APB2PeriphClockCmd+0x38>)
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	43db      	mvns	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	618b      	str	r3, [r1, #24]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000756:	4909      	ldr	r1, [pc, #36]	; (800077c <RCC_APB1PeriphClockCmd+0x38>)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <RCC_APB1PeriphClockCmd+0x38>)
 800075a:	69da      	ldr	r2, [r3, #28]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4313      	orrs	r3, r2
 8000760:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000762:	e006      	b.n	8000772 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000764:	4905      	ldr	r1, [pc, #20]	; (800077c <RCC_APB1PeriphClockCmd+0x38>)
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <RCC_APB1PeriphClockCmd+0x38>)
 8000768:	69da      	ldr	r2, [r3, #28]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	43db      	mvns	r3, r3
 800076e:	4013      	ands	r3, r2
 8000770:	61cb      	str	r3, [r1, #28]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000

08000780 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	8a1b      	ldrh	r3, [r3, #16]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80007aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ac:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80007b0:	4013      	ands	r3, r2
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	88db      	ldrh	r3, [r3, #6]
 80007b8:	461a      	mov	r2, r3
 80007ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007bc:	4313      	orrs	r3, r2
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80007d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80007d6:	4013      	ands	r3, r2
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	889a      	ldrh	r2, [r3, #4]
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	891b      	ldrh	r3, [r3, #8]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f2:	4313      	orrs	r3, r2
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	8a9b      	ldrh	r3, [r3, #20]
 8000802:	b29b      	uxth	r3, r3
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000808:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800080c:	4013      	ands	r3, r2
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	899b      	ldrh	r3, [r3, #12]
 8000814:	461a      	mov	r2, r3
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	4313      	orrs	r3, r2
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	b29a      	uxth	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff febd 	bl	80005a8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <USART_Init+0x16c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d102      	bne.n	800083c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
 800083a:	e001      	b.n	8000840 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	899b      	ldrh	r3, [r3, #12]
 8000844:	b29b      	uxth	r3, r3
 8000846:	b21b      	sxth	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	da0c      	bge.n	8000866 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800084c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	009a      	lsls	r2, r3, #2
 8000856:	441a      	add	r2, r3
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
 8000864:	e00b      	b.n	800087e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	009a      	lsls	r2, r3, #2
 8000870:	441a      	add	r2, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <USART_Init+0x170>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	2264      	movs	r2, #100	; 0x64
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	da0c      	bge.n	80008c2 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	3332      	adds	r3, #50	; 0x32
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <USART_Init+0x170>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	095b      	lsrs	r3, r3, #5
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008bc:	4313      	orrs	r3, r2
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008c0:	e00b      	b.n	80008da <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	3332      	adds	r3, #50	; 0x32
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <USART_Init+0x170>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d6:	4313      	orrs	r3, r2
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008dc:	b29a      	uxth	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	811a      	strh	r2, [r3, #8]
}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40013800 	.word	0x40013800
 80008f0:	51eb851f 	.word	0x51eb851f

080008f4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	899b      	ldrh	r3, [r3, #12]
 800090a:	b29b      	uxth	r3, r3
 800090c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000910:	b29a      	uxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000916:	e007      	b.n	8000928 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000922:	b29a      	uxth	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	819a      	strh	r2, [r3, #12]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000932:	b480      	push	{r7}
 8000934:	b087      	sub	sp, #28
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	460b      	mov	r3, r1
 800093c:	807b      	strh	r3, [r7, #2]
 800093e:	4613      	mov	r3, r2
 8000940:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	f003 031f 	and.w	r3, r3, #31
 8000966:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000968:	2201      	movs	r2, #1
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d103      	bne.n	8000980 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	330c      	adds	r3, #12
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d103      	bne.n	800098e <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3310      	adds	r3, #16
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e002      	b.n	8000994 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3314      	adds	r3, #20
 8000992:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000994:	787b      	ldrb	r3, [r7, #1]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	6811      	ldr	r1, [r2, #0]
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80009a6:	e006      	b.n	80009b6 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	6811      	ldr	r1, [r2, #0]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	400a      	ands	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	371c      	adds	r7, #28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	809a      	strh	r2, [r3, #4]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b085      	sub	sp, #20
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	460b      	mov	r3, r1
 80009ec:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	4013      	ands	r3, r2
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e001      	b.n	8000a0c <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000a46:	2201      	movs	r2, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d107      	bne.n	8000a66 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	899b      	ldrh	r3, [r3, #12]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	4013      	ands	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e011      	b.n	8000a8a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d107      	bne.n	8000a7c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	8a1b      	ldrh	r3, [r3, #16]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	4013      	ands	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e006      	b.n	8000a8a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8a9b      	ldrh	r3, [r3, #20]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4013      	ands	r3, r2
 8000a88:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a92:	2201      	movs	r2, #1
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <USART_GetITStatus+0xa4>
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	74fb      	strb	r3, [r7, #19]
 8000aba:	e001      	b.n	8000ac0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	371c      	adds	r7, #28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	81fb      	strh	r3, [r7, #14]
 8000adc:	2300      	movs	r3, #0
 8000ade:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000af0:	89bb      	ldrh	r3, [r7, #12]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	801a      	strh	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da0b      	bge.n	8000b30 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b18:	490d      	ldr	r1, [pc, #52]	; (8000b50 <NVIC_SetPriority+0x4c>)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	3b04      	subs	r3, #4
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000b2e:	e009      	b.n	8000b44 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000b30:	4908      	ldr	r1, [pc, #32]	; (8000b54 <NVIC_SetPriority+0x50>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b66:	d301      	bcc.n	8000b6c <SysTick_Config+0x14>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e011      	b.n	8000b90 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b74:	3b01      	subs	r3, #1
 8000b76:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b7e:	f7ff ffc1 	bl	8000b04 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <SysTick_Config+0x40>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <setup_INT_externa>:
uint8_t DUAL_STATE = 0;
void updateDisplay();
void loadBytes(uint8_t a, uint8_t b);

// -- esta secao e nova nesta pratica --
void setup_INT_externa(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef IntExt_PtB;           // declara estrut IntExt_PtB
	NVIC_InitTypeDef NVIC_InitS;             // estrutura NVIC port B
	// configurar dados estrutura interrupcao
	IntExt_PtB.EXTI_Line = EXTI_Line6;           // qual linha pede interrupcao
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	60bb      	str	r3, [r7, #8]
	IntExt_PtB.EXTI_Mode = EXTI_Mode_Interrupt;  // modo interrupcao
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	733b      	strb	r3, [r7, #12]
	IntExt_PtB.EXTI_Trigger = EXTI_Trigger_Rising;  // dispara no falling_edge
 8000baa:	2308      	movs	r3, #8
 8000bac:	737b      	strb	r3, [r7, #13]
	IntExt_PtB.EXTI_LineCmd = ENABLE;           // habilita ext_int
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&IntExt_PtB);  // chama fun��o que inicializa interrupcao
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb2a 	bl	8000210 <EXTI_Init>

	// configurar o NVIC (estrutura e funcao no misc.h e misc.c)
	NVIC_InitS.NVIC_IRQChannel = EXTI9_5_IRQn;     // IRQ_ext linha EXTI9_5_IRQn
 8000bbc:	2317      	movs	r3, #23
 8000bbe:	713b      	strb	r3, [r7, #4]
	NVIC_InitS.NVIC_IRQChannelPreemptionPriority = 1;      // prioridade preempt
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	717b      	strb	r3, [r7, #5]
	NVIC_InitS.NVIC_IRQChannelSubPriority = 1;       // prioridade 1
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	71bb      	strb	r3, [r7, #6]
	NVIC_InitS.NVIC_IRQChannelCmd = ENABLE;		     // habilitada
 8000bc8:	2301      	movs	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitS);    // chama fn que inicializa NVIC
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fabc 	bl	800014c <NVIC_Init>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <setup_systick>:

// fn que configura o SysTick c/ 1ms  (freq_systema/frequency
void setup_systick(uint16_t f_tick) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcdc 	bl	80005a8 <RCC_GetClocksFreq>
	(void) SysTick_Config(RCC_Clocks.HCLK_Frequency / f_tick);
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffad 	bl	8000b58 <SysTick_Config>
}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <setup_USART>:

void setup_USART(uint32_t baud_rate) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitS;
	/* USART */
	//PA2 = USART2 TX
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); // clock do GPIOA
 8000c10:	2101      	movs	r1, #1
 8000c12:	2004      	movs	r0, #4
 8000c14:	f7ff fd78 	bl	8000708 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);  // clock da USART
 8000c18:	2101      	movs	r1, #1
 8000c1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c1e:	f7ff fd91 	bl	8000744 <RCC_APB1PeriphClockCmd>
	GPIO_InitS.GPIO_Mode = GPIO_Mode_AF_PP;
 8000c22:	2318      	movs	r3, #24
 8000c24:	77fb      	strb	r3, [r7, #31]
	GPIO_InitS.GPIO_Pin = GPIO_Pin_2;
 8000c26:	2304      	movs	r3, #4
 8000c28:	83bb      	strh	r3, [r7, #28]
	GPIO_InitS.GPIO_Speed = GPIO_Speed_2MHz;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA, &GPIO_InitS);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	481d      	ldr	r0, [pc, #116]	; (8000cac <setup_USART+0xa4>)
 8000c36:	f7ff fb8f 	bl	8000358 <GPIO_Init>
	//PA3 = USART2 RX
	GPIO_InitS.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitS.GPIO_Pin = GPIO_Pin_3;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	83bb      	strh	r3, [r7, #28]
	GPIO_Init(GPIOA, &GPIO_InitS);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4818      	ldr	r0, [pc, #96]	; (8000cac <setup_USART+0xa4>)
 8000c4a:	f7ff fb85 	bl	8000358 <GPIO_Init>
	/* USART END */

	USART_InitTypeDef USART_InitStruct; // this is for the USART2 initilization
	USART_InitStruct.USART_BaudRate = baud_rate; // the baudrate is set to the value we passed into this init function
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b; // we want the data frame size to be 8 bits (standard)
 8000c52:	2300      	movs	r3, #0
 8000c54:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000c56:	2300      	movs	r3, #0
 8000c58:	827b      	strh	r3, [r7, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000c62:	230c      	movs	r3, #12
 8000c64:	82fb      	strh	r3, [r7, #22]
	USART_Init(USART2, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <setup_USART+0xa8>)
 8000c6e:	f7ff fd87 	bl	8000780 <USART_Init>
	/* Here the USART2 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART2_IRQHandler() function
	 * if the USART2 receive interrupt occurs
	 */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); // enable the USART2 receive interrupt
 8000c72:	2201      	movs	r2, #1
 8000c74:	f240 5125 	movw	r1, #1317	; 0x525
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <setup_USART+0xa8>)
 8000c7a:	f7ff fe5a 	bl	8000932 <USART_ITConfig>
	NVIC_InitTypeDef NVIC_InitS;
	NVIC_InitS.NVIC_IRQChannel = USART2_IRQn; // we want to configure the USART2 interrupts
 8000c7e:	2326      	movs	r3, #38	; 0x26
 8000c80:	723b      	strb	r3, [r7, #8]
	NVIC_InitS.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000c82:	2300      	movs	r3, #0
 8000c84:	72bb      	strb	r3, [r7, #10]
	NVIC_InitS.NVIC_IRQChannelCmd = ENABLE;	// the USART2 interrupts are globally enabled
 8000c86:	2301      	movs	r3, #1
 8000c88:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitS);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa5c 	bl	800014c <NVIC_Init>

	// finally this enables the complete USART2 peripheral
	USART_Cmd(USART2, ENABLE);
 8000c94:	2101      	movs	r1, #1
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <setup_USART+0xa8>)
 8000c98:	f7ff fe2c 	bl	80008f4 <USART_Cmd>
	usart_counter = 0;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <setup_USART+0xac>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
	//USART_ClearITPendingBit(USART2, USART_IT_RXNE);
}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	20000088 	.word	0x20000088

08000cb8 <setup_GPIO>:

void setup_GPIO() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

	// dec ESTRUTURAS dados: GPIO, EXTI (external int) e NVIC (contrl vet interrpt)
	GPIO_InitTypeDef GPIO_InitS;
	// habilitar o clock do periferico de interrupcao
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fd21 	bl	8000708 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	2008      	movs	r0, #8
 8000cca:	f7ff fd1d 	bl	8000708 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2010      	movs	r0, #16
 8000cd2:	f7ff fd19 	bl	8000708 <RCC_APB2PeriphClockCmd>

	GPIO_StructInit(&GPIO_InitS);
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fbf9 	bl	80004d0 <GPIO_StructInit>
	GPIO_InitS.GPIO_Mode = GPIO_Mode_Out_PP;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitS.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_13 | GPIO_Pin_7; // Pinos para o reg e o led PB7
 8000ce2:	f242 0383 	movw	r3, #8323	; 0x2083
 8000ce6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitS.GPIO_Speed = GPIO_Speed_2MHz;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitS);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <setup_GPIO+0x84>)
 8000cf2:	f7ff fb31 	bl	8000358 <GPIO_Init>
	GPIO_InitS.GPIO_Pin = GPIO_Pin_6;
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	80bb      	strh	r3, [r7, #4]
	GPIO_InitS.GPIO_Mode = GPIO_Mode_IN_FLOATING; // modo input pino B6
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitS.GPIO_Speed = GPIO_Speed_2MHz;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitS);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <setup_GPIO+0x84>)
 8000d08:	f7ff fb26 	bl	8000358 <GPIO_Init>

	// Leds do GPIOC
	GPIO_InitS.GPIO_Mode = GPIO_Mode_Out_PP;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitS.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000d10:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d14:	80bb      	strh	r3, [r7, #4]
	GPIO_InitS.GPIO_Speed = GPIO_Speed_2MHz;
 8000d16:	2302      	movs	r3, #2
 8000d18:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitS);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <setup_GPIO+0x88>)
 8000d20:	f7ff fb1a 	bl	8000358 <GPIO_Init>

	// config que GPIOB pino 6 sera usado para gerar EXT INT
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource6);
 8000d24:	2106      	movs	r1, #6
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff fbfc 	bl	8000524 <GPIO_EXTILineConfig>
	EXTI_ClearITPendingBit(EXTI_Line6);
 8000d2c:	2040      	movs	r0, #64	; 0x40
 8000d2e:	f7ff fb05 	bl	800033c <EXTI_ClearITPendingBit>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000

08000d44 <main>:

// funcao principal do programa
int main(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	setup_INT_externa();                 // setup Interrupcao externa
 8000d48:	f7ff ff28 	bl	8000b9c <setup_INT_externa>
	setup_systick(FREQ_TICK);            // set timers p/ 1 ms  (1000 Hz)
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f7ff ff44 	bl	8000bdc <setup_systick>
	setup_GPIO();
 8000d54:	f7ff ffb0 	bl	8000cb8 <setup_GPIO>
	setup_USART(9600);
 8000d58:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000d5c:	f7ff ff54 	bl	8000c08 <setup_USART>
	while (1) {
		if (!started) {
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <main+0x7c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <main+0x32>
			started = 1;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <main+0x7c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
			time_start_set();
 8000d70:	f000 fa98 	bl	80012a4 <time_start_set>
 8000d74:	e010      	b.n	8000d98 <main+0x54>
		} else {
			time_get();
 8000d76:	f000 faa1 	bl	80012bc <time_get>
			if (display_timing <= millis()) {
 8000d7a:	f000 fa89 	bl	8001290 <millis>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <main+0x80>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d307      	bcc.n	8000d98 <main+0x54>
				updateDisplay();
 8000d88:	f000 f828 	bl	8000ddc <updateDisplay>
				display_timing = millis() + DISPLAY_UPDATE_DELAY;
 8000d8c:	f000 fa80 	bl	8001290 <millis>
 8000d90:	4603      	mov	r3, r0
 8000d92:	3304      	adds	r3, #4
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <main+0x80>)
 8000d96:	6013      	str	r3, [r2, #0]
			}
		}
		assemblePayload(min1, seg1, seg2, decseg);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <main+0x84>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	b2d8      	uxtb	r0, r3
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <main+0x88>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	b2d9      	uxtb	r1, r3
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <main+0x8c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <main+0x90>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f000 fbb2 	bl	8001518 <assemblePayload>
		//assemblePayload(1, 2, 3, 4);
		USART_SendBytes(payload, 4); // mandando sempre
 8000db4:	2104      	movs	r1, #4
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <main+0x94>)
 8000db8:	f000 fb88 	bl	80014cc <USART_SendBytes>
		if (!started) {
 8000dbc:	e7d0      	b.n	8000d60 <main+0x1c>
 8000dbe:	bf00      	nop
 8000dc0:	2000003c 	.word	0x2000003c
 8000dc4:	20000084 	.word	0x20000084
 8000dc8:	20000054 	.word	0x20000054
 8000dcc:	20000058 	.word	0x20000058
 8000dd0:	2000005c 	.word	0x2000005c
 8000dd4:	20000060 	.word	0x20000060
 8000dd8:	2000008c 	.word	0x2000008c

08000ddc <updateDisplay>:
	}
}

void updateDisplay() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	uint8_t m1 = 0, s1 = 0, s2 = 0, ds = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	2300      	movs	r3, #0
 8000de8:	71bb      	strb	r3, [r7, #6]
 8000dea:	2300      	movs	r3, #0
 8000dec:	717b      	strb	r3, [r7, #5]
 8000dee:	2300      	movs	r3, #0
 8000df0:	713b      	strb	r3, [r7, #4]
	switch (get_estado_crono()) {
 8000df2:	f000 fb61 	bl	80014b8 <get_estado_crono>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d045      	beq.n	8000e88 <updateDisplay+0xac>
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d302      	bcc.n	8000e06 <updateDisplay+0x2a>
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d074      	beq.n	8000eee <updateDisplay+0x112>
			m1 = min1, s1 = seg1, s2 = seg2, ds = decseg;

		break;
	}
	default:
		break;
 8000e04:	e0f1      	b.n	8000fea <updateDisplay+0x20e>
		if (!LED_LOCAL) {
 8000e06:	4bad      	ldr	r3, [pc, #692]	; (80010bc <updateDisplay+0x2e0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d108      	bne.n	8000e20 <updateDisplay+0x44>
			GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e14:	48aa      	ldr	r0, [pc, #680]	; (80010c0 <updateDisplay+0x2e4>)
 8000e16:	f7ff fb6e 	bl	80004f6 <GPIO_WriteBit>
			LED_LOCAL = 1;
 8000e1a:	4ba8      	ldr	r3, [pc, #672]	; (80010bc <updateDisplay+0x2e0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
		if (LED_EXTERNAL) {
 8000e20:	4ba8      	ldr	r3, [pc, #672]	; (80010c4 <updateDisplay+0x2e8>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <updateDisplay+0x5e>
			GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	48a4      	ldr	r0, [pc, #656]	; (80010c0 <updateDisplay+0x2e4>)
 8000e30:	f7ff fb61 	bl	80004f6 <GPIO_WriteBit>
			LED_EXTERNAL = 0;
 8000e34:	4ba3      	ldr	r3, [pc, #652]	; (80010c4 <updateDisplay+0x2e8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
		if (LED_DUAL) {
 8000e3a:	4ba3      	ldr	r3, [pc, #652]	; (80010c8 <updateDisplay+0x2ec>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <updateDisplay+0x76>
			GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	48a1      	ldr	r0, [pc, #644]	; (80010cc <updateDisplay+0x2f0>)
 8000e48:	f7ff fb55 	bl	80004f6 <GPIO_WriteBit>
			LED_DUAL = 0;
 8000e4c:	4b9e      	ldr	r3, [pc, #632]	; (80010c8 <updateDisplay+0x2ec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		if (DUAL_ENTERED)
 8000e52:	4b9f      	ldr	r3, [pc, #636]	; (80010d0 <updateDisplay+0x2f4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <updateDisplay+0x84>
			DUAL_ENTERED = 0;
 8000e5a:	4b9d      	ldr	r3, [pc, #628]	; (80010d0 <updateDisplay+0x2f4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
		if (DUAL_STATE)
 8000e60:	4b9c      	ldr	r3, [pc, #624]	; (80010d4 <updateDisplay+0x2f8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <updateDisplay+0x92>
			DUAL_STATE = 0;
 8000e68:	4b9a      	ldr	r3, [pc, #616]	; (80010d4 <updateDisplay+0x2f8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		m1 = min1, s1 = seg1, s2 = seg2, ds = decseg;
 8000e6e:	4b9a      	ldr	r3, [pc, #616]	; (80010d8 <updateDisplay+0x2fc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4b99      	ldr	r3, [pc, #612]	; (80010dc <updateDisplay+0x300>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	71bb      	strb	r3, [r7, #6]
 8000e7a:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <updateDisplay+0x304>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	717b      	strb	r3, [r7, #5]
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <updateDisplay+0x308>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	713b      	strb	r3, [r7, #4]
		break;
 8000e86:	e0b0      	b.n	8000fea <updateDisplay+0x20e>
		if (LED_LOCAL) {
 8000e88:	4b8c      	ldr	r3, [pc, #560]	; (80010bc <updateDisplay+0x2e0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <updateDisplay+0xc6>
			GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	488a      	ldr	r0, [pc, #552]	; (80010c0 <updateDisplay+0x2e4>)
 8000e98:	f7ff fb2d 	bl	80004f6 <GPIO_WriteBit>
			LED_LOCAL = 0;
 8000e9c:	4b87      	ldr	r3, [pc, #540]	; (80010bc <updateDisplay+0x2e0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
		if (!LED_EXTERNAL) {
 8000ea2:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <updateDisplay+0x2e8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d108      	bne.n	8000ebc <updateDisplay+0xe0>
			GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb0:	4883      	ldr	r0, [pc, #524]	; (80010c0 <updateDisplay+0x2e4>)
 8000eb2:	f7ff fb20 	bl	80004f6 <GPIO_WriteBit>
			LED_EXTERNAL = 1;
 8000eb6:	4b83      	ldr	r3, [pc, #524]	; (80010c4 <updateDisplay+0x2e8>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
		if (LED_DUAL) {
 8000ebc:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <updateDisplay+0x2ec>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d007      	beq.n	8000ed4 <updateDisplay+0xf8>
			GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	4880      	ldr	r0, [pc, #512]	; (80010cc <updateDisplay+0x2f0>)
 8000eca:	f7ff fb14 	bl	80004f6 <GPIO_WriteBit>
			LED_DUAL = 0;
 8000ece:	4b7e      	ldr	r3, [pc, #504]	; (80010c8 <updateDisplay+0x2ec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
		m1 = min1USART, s1 = seg1USART, s2 = seg2USART, ds = decsegUSART;
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <updateDisplay+0x30c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	4b84      	ldr	r3, [pc, #528]	; (80010ec <updateDisplay+0x310>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	71bb      	strb	r3, [r7, #6]
 8000ee0:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <updateDisplay+0x314>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	717b      	strb	r3, [r7, #5]
 8000ee6:	4b83      	ldr	r3, [pc, #524]	; (80010f4 <updateDisplay+0x318>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	713b      	strb	r3, [r7, #4]
		break;
 8000eec:	e07d      	b.n	8000fea <updateDisplay+0x20e>
		if (LED_LOCAL && !DUAL_ENTERED) {
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <updateDisplay+0x2e0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00c      	beq.n	8000f10 <updateDisplay+0x134>
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <updateDisplay+0x2f4>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d108      	bne.n	8000f10 <updateDisplay+0x134>
			GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	486e      	ldr	r0, [pc, #440]	; (80010c0 <updateDisplay+0x2e4>)
 8000f06:	f7ff faf6 	bl	80004f6 <GPIO_WriteBit>
			LED_LOCAL = 0;
 8000f0a:	4b6c      	ldr	r3, [pc, #432]	; (80010bc <updateDisplay+0x2e0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		if (LED_EXTERNAL) {
 8000f10:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <updateDisplay+0x2e8>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <updateDisplay+0x14e>
			GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	4868      	ldr	r0, [pc, #416]	; (80010c0 <updateDisplay+0x2e4>)
 8000f20:	f7ff fae9 	bl	80004f6 <GPIO_WriteBit>
			LED_EXTERNAL = 0;
 8000f24:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <updateDisplay+0x2e8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
		if (!LED_DUAL) {
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <updateDisplay+0x2ec>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d107      	bne.n	8000f42 <updateDisplay+0x166>
			GPIO_WriteBit(GPIOB, GPIO_Pin_7, Bit_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	4865      	ldr	r0, [pc, #404]	; (80010cc <updateDisplay+0x2f0>)
 8000f38:	f7ff fadd 	bl	80004f6 <GPIO_WriteBit>
			LED_DUAL = 1;
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <updateDisplay+0x2ec>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
		if (!DUAL_ENTERED)
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <updateDisplay+0x2f4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <updateDisplay+0x174>
			DUAL_ENTERED = 1;
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <updateDisplay+0x2f4>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
		uint32_t now = millis();
 8000f50:	f000 f99e 	bl	8001290 <millis>
 8000f54:	6038      	str	r0, [r7, #0]
		if (dual_timing <= now) {
 8000f56:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <updateDisplay+0x31c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d826      	bhi.n	8000fae <updateDisplay+0x1d2>
			DUAL_STATE = !DUAL_STATE;
 8000f60:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <updateDisplay+0x2f8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <updateDisplay+0x2f8>)
 8000f72:	701a      	strb	r2, [r3, #0]
			LED_LOCAL = !LED_LOCAL;
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <updateDisplay+0x2e0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2301      	moveq	r3, #1
 8000f7e:	2300      	movne	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <updateDisplay+0x2e0>)
 8000f86:	701a      	strb	r2, [r3, #0]
			GPIO_WriteBit(GPIOC, GPIO_Pin_13, !LED_LOCAL);
 8000f88:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <updateDisplay+0x2e0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf0c      	ite	eq
 8000f90:	2301      	moveq	r3, #1
 8000f92:	2300      	movne	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4848      	ldr	r0, [pc, #288]	; (80010c0 <updateDisplay+0x2e4>)
 8000f9e:	f7ff faaa 	bl	80004f6 <GPIO_WriteBit>
			dual_timing = now + DUAL_DELAY;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000fa8:	3308      	adds	r3, #8
 8000faa:	4a53      	ldr	r2, [pc, #332]	; (80010f8 <updateDisplay+0x31c>)
 8000fac:	6013      	str	r3, [r2, #0]
		if (!DUAL_STATE)
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <updateDisplay+0x2f8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <updateDisplay+0x1f4>
			m1 = min1USART, s1 = seg1USART, s2 = seg2USART, ds = decsegUSART;
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <updateDisplay+0x30c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <updateDisplay+0x310>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <updateDisplay+0x314>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	717b      	strb	r3, [r7, #5]
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <updateDisplay+0x318>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	713b      	strb	r3, [r7, #4]
		break;
 8000fce:	e00b      	b.n	8000fe8 <updateDisplay+0x20c>
			m1 = min1, s1 = seg1, s2 = seg2, ds = decseg;
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <updateDisplay+0x2fc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <updateDisplay+0x300>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	71bb      	strb	r3, [r7, #6]
 8000fdc:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <updateDisplay+0x304>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	717b      	strb	r3, [r7, #5]
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <updateDisplay+0x308>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	713b      	strb	r3, [r7, #4]
		break;
 8000fe8:	bf00      	nop
	}
	// PB13 SER
	// PB0  RCK
	// PB1  SCK
	switch (estado_reg) {
 8000fea:	4b44      	ldr	r3, [pc, #272]	; (80010fc <updateDisplay+0x320>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	f200 8086 	bhi.w	8001100 <updateDisplay+0x324>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <updateDisplay+0x220>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	0800100d 	.word	0x0800100d
 8001000:	0800103d 	.word	0x0800103d
 8001004:	0800106d 	.word	0x0800106d
 8001008:	08001095 	.word	0x08001095
	case 0:
		if ((m1 + s1 + s2 + ds) == 0) // Se todos forem zero (funciona pois nunca serão negativos)
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	441a      	add	r2, r3
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	441a      	add	r2, r3
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d104      	bne.n	8001028 <updateDisplay+0x24c>
				{
			loadBytes(0xFF, DIGIT_4); // Código 7seg para todos apagados (~0x0)
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	20ff      	movs	r0, #255	; 0xff
 8001022:	f000 f87f 	bl	8001124 <loadBytes>
			break;
 8001026:	e06f      	b.n	8001108 <updateDisplay+0x32c>
		}
		loadBytes(seg7(ds), DIGIT_4);
 8001028:	793b      	ldrb	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fa00 	bl	8001430 <seg7>
 8001030:	4603      	mov	r3, r0
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f875 	bl	8001124 <loadBytes>
		break;
 800103a:	e065      	b.n	8001108 <updateDisplay+0x32c>
	case 1:
		if ((m1 + s1 + s2) == 0) // Se os últimos 3 forem zero
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	441a      	add	r2, r3
 8001042:	797b      	ldrb	r3, [r7, #5]
 8001044:	4413      	add	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d104      	bne.n	8001054 <updateDisplay+0x278>
				{
			loadBytes(0xFF, DIGIT_4); // Código 7seg para todos apagados (~0x0)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	20ff      	movs	r0, #255	; 0xff
 800104e:	f000 f869 	bl	8001124 <loadBytes>
			break;
 8001052:	e059      	b.n	8001108 <updateDisplay+0x32c>
		}
		loadBytes(~((~seg7(s2)) + 0x1), DIGIT_3); // +0x1 para inserir o ponto
 8001054:	797b      	ldrb	r3, [r7, #5]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f9ea 	bl	8001430 <seg7>
 800105c:	4603      	mov	r3, r0
 800105e:	3b01      	subs	r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2140      	movs	r1, #64	; 0x40
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f85d 	bl	8001124 <loadBytes>
		break;
 800106a:	e04d      	b.n	8001108 <updateDisplay+0x32c>
	case 2:
		if ((m1 + s1) == 0) // Se os últimos 2 forem zero
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	4413      	add	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d104      	bne.n	8001080 <updateDisplay+0x2a4>
				{
			loadBytes(0xFF, DIGIT_4); // Código 7seg para todos apagados (~0x0)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	20ff      	movs	r0, #255	; 0xff
 800107a:	f000 f853 	bl	8001124 <loadBytes>
			break;
 800107e:	e043      	b.n	8001108 <updateDisplay+0x32c>
		}
		loadBytes(seg7(s1), DIGIT_2);
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f9d4 	bl	8001430 <seg7>
 8001088:	4603      	mov	r3, r0
 800108a:	2120      	movs	r1, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f849 	bl	8001124 <loadBytes>
		break;
 8001092:	e039      	b.n	8001108 <updateDisplay+0x32c>
	case 3:
		if (m1 == 0) // Se o último for zero
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <updateDisplay+0x2c8>
				{
			loadBytes(0xFF, DIGIT_4); // Código 7seg para todos apagados (~0x0)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	20ff      	movs	r0, #255	; 0xff
 800109e:	f000 f841 	bl	8001124 <loadBytes>
			break;
 80010a2:	e031      	b.n	8001108 <updateDisplay+0x32c>
		}
		loadBytes(~((~seg7(m1)) + 0x1), DIGIT_1); // +0x1 para inserir o ponto
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f9c2 	bl	8001430 <seg7>
 80010ac:	4603      	mov	r3, r0
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2110      	movs	r1, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f835 	bl	8001124 <loadBytes>
		break;
 80010ba:	e025      	b.n	8001108 <updateDisplay+0x32c>
 80010bc:	2000003d 	.word	0x2000003d
 80010c0:	40011000 	.word	0x40011000
 80010c4:	2000003e 	.word	0x2000003e
 80010c8:	2000003f 	.word	0x2000003f
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	20000040 	.word	0x20000040
 80010d4:	20000048 	.word	0x20000048
 80010d8:	20000054 	.word	0x20000054
 80010dc:	20000058 	.word	0x20000058
 80010e0:	2000005c 	.word	0x2000005c
 80010e4:	20000060 	.word	0x20000060
 80010e8:	20000064 	.word	0x20000064
 80010ec:	20000068 	.word	0x20000068
 80010f0:	2000006c 	.word	0x2000006c
 80010f4:	20000070 	.word	0x20000070
 80010f8:	20000044 	.word	0x20000044
 80010fc:	2000007c 	.word	0x2000007c
	default:
		estado_reg = 0;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <updateDisplay+0x344>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
		break;
 8001106:	bf00      	nop
	}
	estado_reg = (estado_reg + 1) % 4;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <updateDisplay+0x344>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	4a03      	ldr	r2, [pc, #12]	; (8001120 <updateDisplay+0x344>)
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000007c 	.word	0x2000007c

08001124 <loadBytes>:

void loadBytes(uint8_t a, uint8_t b) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
	GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2101      	movs	r1, #1
 8001138:	4826      	ldr	r0, [pc, #152]	; (80011d4 <loadBytes+0xb0>)
 800113a:	f7ff f9dc 	bl	80004f6 <GPIO_WriteBit>
	int i;
	for (i = 0; i < 8; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e01a      	b.n	800117a <loadBytes+0x56>
		GPIO_WriteBit(GPIOB, GPIO_Pin_1, Bit_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2102      	movs	r1, #2
 8001148:	4822      	ldr	r0, [pc, #136]	; (80011d4 <loadBytes+0xb0>)
 800114a:	f7ff f9d4 	bl	80004f6 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_13, (a >> i) & 0x1);
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	fa42 f303 	asr.w	r3, r2, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	481b      	ldr	r0, [pc, #108]	; (80011d4 <loadBytes+0xb0>)
 8001166:	f7ff f9c6 	bl	80004f6 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_1, Bit_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	4819      	ldr	r0, [pc, #100]	; (80011d4 <loadBytes+0xb0>)
 8001170:	f7ff f9c1 	bl	80004f6 <GPIO_WriteBit>
	for (i = 0; i < 8; i++) {
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b07      	cmp	r3, #7
 800117e:	dde1      	ble.n	8001144 <loadBytes+0x20>
	}
	for (i = 0; i < 8; i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e01a      	b.n	80011bc <loadBytes+0x98>
		GPIO_WriteBit(GPIOB, GPIO_Pin_1, Bit_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <loadBytes+0xb0>)
 800118c:	f7ff f9b3 	bl	80004f6 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_13, (b >> i) & 0x1);
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	fa42 f303 	asr.w	r3, r2, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <loadBytes+0xb0>)
 80011a8:	f7ff f9a5 	bl	80004f6 <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_1, Bit_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2102      	movs	r1, #2
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <loadBytes+0xb0>)
 80011b2:	f7ff f9a0 	bl	80004f6 <GPIO_WriteBit>
	for (i = 0; i < 8; i++) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b07      	cmp	r3, #7
 80011c0:	dde1      	ble.n	8001186 <loadBytes+0x62>
	}
	GPIO_WriteBit(GPIOB, GPIO_Pin_0, Bit_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2101      	movs	r1, #1
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <loadBytes+0xb0>)
 80011c8:	f7ff f995 	bl	80004f6 <GPIO_WriteBit>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011de:	e003      	b.n	80011e8 <LoopCopyDataInit>

080011e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80011e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011e6:	3104      	adds	r1, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80011ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011f0:	d3f6      	bcc.n	80011e0 <CopyDataInit>
	ldr	r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80011f4:	e002      	b.n	80011fc <LoopFillZerobss>

080011f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011f8:	f842 3b04 	str.w	r3, [r2], #4

080011fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80011fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001200:	d3f9      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001202:	f000 f9f7 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f000 faaf 	bl	8001768 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120a:	f7ff fd9b 	bl	8000d44 <main>
	bx	lr
 800120e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001210:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001214:	080017d0 	.word	0x080017d0
	ldr	r0, =_sdata
 8001218:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800121c:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8001220:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8001224:	20000090 	.word	0x20000090

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>

0800122a <NMI_Handler>:
/**
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void) {
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1) {
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1) {
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1) {
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1) {
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:
/**
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void) {
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Handler>:
 * @retval None
 */

uint32_t ticks = 0;

void SysTick_Handler(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	ticks++;
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Handler+0x18>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a03      	ldr	r2, [pc, #12]	; (800128c <SysTick_Handler+0x18>)
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000050 	.word	0x20000050

08001290 <millis>:

uint32_t millis() {
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	return ticks;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <millis+0x10>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000050 	.word	0x20000050

080012a4 <time_start_set>:

void time_start_set() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	time = millis();
 80012a8:	f7ff fff2 	bl	8001290 <millis>
 80012ac:	4602      	mov	r2, r0
 80012ae:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <time_start_set+0x14>)
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000074 	.word	0x20000074

080012bc <time_get>:

uint32_t min1 = 0, seg1 = 0, seg2 = 0, decseg = 0;
uint32_t min1USART = 0, seg1USART = 0, seg2USART = 0, decsegUSART = 0;
uint32_t time = 0;

void time_get() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
	uint32_t now;
	now = millis() - time;
 80012c2:	f7ff ffe5 	bl	8001290 <millis>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <time_get+0x138>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	60bb      	str	r3, [r7, #8]
	min1 = (now / (1000 * 60)) % 10;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <time_get+0x13c>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0b99      	lsrs	r1, r3, #14
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <time_get+0x140>)
 80012dc:	fba3 2301 	umull	r2, r3, r3, r1
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	1aca      	subs	r2, r1, r3
 80012ec:	4b44      	ldr	r3, [pc, #272]	; (8001400 <time_get+0x144>)
 80012ee:	601a      	str	r2, [r3, #0]
	seg1 = ((now % (1000 * 60)) / 1000) / 10;
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <time_get+0x13c>)
 80012f4:	fba3 1302 	umull	r1, r3, r3, r2
 80012f8:	0b9b      	lsrs	r3, r3, #14
 80012fa:	f64e 2160 	movw	r1, #60000	; 0xea60
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <time_get+0x148>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0b5b      	lsrs	r3, r3, #13
 800130c:	4a3e      	ldr	r2, [pc, #248]	; (8001408 <time_get+0x14c>)
 800130e:	6013      	str	r3, [r2, #0]
	seg2 = ((now % (1000 * 60)) / 1000) % 10;
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <time_get+0x13c>)
 8001314:	fba3 1302 	umull	r1, r3, r3, r2
 8001318:	0b9b      	lsrs	r3, r3, #14
 800131a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a39      	ldr	r2, [pc, #228]	; (800140c <time_get+0x150>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0999      	lsrs	r1, r3, #6
 800132c:	4b33      	ldr	r3, [pc, #204]	; (80013fc <time_get+0x140>)
 800132e:	fba3 2301 	umull	r2, r3, r3, r1
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	1aca      	subs	r2, r1, r3
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <time_get+0x154>)
 8001340:	601a      	str	r2, [r3, #0]
	decseg = ((now % (1000 * 60)) % 1000) / 100;
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <time_get+0x13c>)
 8001346:	fba3 1302 	umull	r1, r3, r3, r2
 800134a:	0b9b      	lsrs	r3, r3, #14
 800134c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	4a2d      	ldr	r2, [pc, #180]	; (800140c <time_get+0x150>)
 8001358:	fba2 1203 	umull	r1, r2, r2, r3
 800135c:	0992      	lsrs	r2, r2, #6
 800135e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001362:	fb01 f202 	mul.w	r2, r1, r2
 8001366:	1a9a      	subs	r2, r3, r2
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <time_get+0x158>)
 800136a:	fba3 2302 	umull	r2, r3, r3, r2
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	4a29      	ldr	r2, [pc, #164]	; (8001418 <time_get+0x15c>)
 8001372:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < 4; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e034      	b.n	80013e4 <time_get+0x128>
		uint8_t digito = (usart_buffer[i] & 0xF0) >> 4;
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <time_get+0x160>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	111b      	asrs	r3, r3, #4
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	71fb      	strb	r3, [r7, #7]
		uint8_t valor = usart_buffer[i] & 0x0F;
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <time_get+0x160>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	71bb      	strb	r3, [r7, #6]
		switch (digito) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d81a      	bhi.n	80013dc <time_get+0x120>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <time_get+0xf0>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013bd 	.word	0x080013bd
 80013b0:	080013c5 	.word	0x080013c5
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	080013d5 	.word	0x080013d5
		case 1:
			min1USART = valor;
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <time_get+0x164>)
 80013c0:	6013      	str	r3, [r2, #0]
			break;
 80013c2:	e00c      	b.n	80013de <time_get+0x122>
		case 2:
			seg1USART = valor;
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <time_get+0x168>)
 80013c8:	6013      	str	r3, [r2, #0]
			break;
 80013ca:	e008      	b.n	80013de <time_get+0x122>
		case 3:
			seg2USART = valor;
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <time_get+0x16c>)
 80013d0:	6013      	str	r3, [r2, #0]
			break;
 80013d2:	e004      	b.n	80013de <time_get+0x122>
		case 4:
			decsegUSART = valor;
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <time_get+0x170>)
 80013d8:	6013      	str	r3, [r2, #0]
			break;
 80013da:	e000      	b.n	80013de <time_get+0x122>
		default:
			break;
 80013dc:	bf00      	nop
	for (int i = 0; i < 4; i++) {
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3301      	adds	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	ddc7      	ble.n	800137a <time_get+0xbe>
		}
	}
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000074 	.word	0x20000074
 80013f8:	45e7b273 	.word	0x45e7b273
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	20000054 	.word	0x20000054
 8001404:	d1b71759 	.word	0xd1b71759
 8001408:	20000058 	.word	0x20000058
 800140c:	10624dd3 	.word	0x10624dd3
 8001410:	2000005c 	.word	0x2000005c
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	20000060 	.word	0x20000060
 800141c:	2000004c 	.word	0x2000004c
 8001420:	20000064 	.word	0x20000064
 8001424:	20000068 	.word	0x20000068
 8001428:	2000006c 	.word	0x2000006c
 800142c:	20000070 	.word	0x20000070

08001430 <seg7>:

uint8_t seg7_diplay[10] = { 0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE0,
		0xFE, 0xE6 };

uint8_t seg7(uint8_t bcd) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	if (bcd >= 0 && bcd <= 9)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b09      	cmp	r3, #9
 800143e:	d805      	bhi.n	800144c <seg7+0x1c>
		return ~seg7_diplay[bcd];
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <seg7+0x28>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	43db      	mvns	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e000      	b.n	800144e <seg7+0x1e>
	else
		return ~0x2; // Traço no meio
 800144c:	23fd      	movs	r3, #253	; 0xfd
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000014 	.word	0x20000014

0800145c <EXTI9_5_IRQHandler>:
volatile uint32_t display_timing = 0;
volatile uint8_t usart_counter = 0;
volatile uint8_t usart_buffer[4] = {0, 0, 0, 0};
uint8_t payload[4];

void EXTI9_5_IRQHandler(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line6) != RESET
 8001460:	2040      	movs	r0, #64	; 0x40
 8001462:	f7fe ff47 	bl	80002f4 <EXTI_GetITStatus>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d019      	beq.n	80014a0 <EXTI9_5_IRQHandler+0x44>
			&& (millis() - EXI9_5_Before > 150)) {
 800146c:	f7ff ff10 	bl	8001290 <millis>
 8001470:	4602      	mov	r2, r0
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <EXTI9_5_IRQHandler+0x50>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b96      	cmp	r3, #150	; 0x96
 800147a:	d911      	bls.n	80014a0 <EXTI9_5_IRQHandler+0x44>
		estado_crono = (estado_crono + 1) % 3;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <EXTI9_5_IRQHandler+0x54>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	1c59      	adds	r1, r3, #1
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <EXTI9_5_IRQHandler+0x58>)
 8001484:	fba3 2301 	umull	r2, r3, r3, r1
 8001488:	085a      	lsrs	r2, r3, #1
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	1aca      	subs	r2, r1, r3
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <EXTI9_5_IRQHandler+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
		EXI9_5_Before = millis();
 8001496:	f7ff fefb 	bl	8001290 <millis>
 800149a:	4602      	mov	r2, r0
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <EXTI9_5_IRQHandler+0x50>)
 800149e:	601a      	str	r2, [r3, #0]
	}
	EXTI_ClearITPendingBit(EXTI_Line6);
 80014a0:	2040      	movs	r0, #64	; 0x40
 80014a2:	f7fe ff4b 	bl	800033c <EXTI_ClearITPendingBit>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000080 	.word	0x20000080
 80014b0:	20000078 	.word	0x20000078
 80014b4:	aaaaaaab 	.word	0xaaaaaaab

080014b8 <get_estado_crono>:

uint32_t get_estado_crono(void) {
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	return estado_crono;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <get_estado_crono+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000078 	.word	0x20000078

080014cc <USART_SendBytes>:

void USART_SendBytes(uint8_t *data, int count) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	int i;
	for (i = 0; i < count; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e013      	b.n	8001504 <USART_SendBytes+0x38>
		//while( !(USART2->SR & 0x00000040));
		USART_SendData(USART2, *(data + i));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	480a      	ldr	r0, [pc, #40]	; (8001514 <USART_SendBytes+0x48>)
 80014ea:	f7ff fa69 	bl	80009c0 <USART_SendData>
		//USART_ClearFlag(USART2, USART_FLAG_RXNE + USART_FLAG_TC);
		//while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
		// while(!USART_GetFlagStatus(USART2, USART_FLAG_TC));
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 80014ee:	bf00      	nop
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	4808      	ldr	r0, [pc, #32]	; (8001514 <USART_SendBytes+0x48>)
 80014f4:	f7ff fa75 	bl	80009e2 <USART_GetFlagStatus>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f8      	beq.n	80014f0 <USART_SendBytes+0x24>
	for (i = 0; i < count; i++) {
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbe7      	blt.n	80014dc <USART_SendBytes+0x10>
			;
	}
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40004400 	.word	0x40004400

08001518 <assemblePayload>:

void assemblePayload(uint8_t min1_p, uint8_t seg1_p, uint8_t seg2_p,
		uint8_t decseg_p) {
 8001518:	b490      	push	{r4, r7}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	4603      	mov	r3, r0
 800152c:	71bb      	strb	r3, [r7, #6]
 800152e:	460b      	mov	r3, r1
 8001530:	717b      	strb	r3, [r7, #5]
 8001532:	4613      	mov	r3, r2
 8001534:	713b      	strb	r3, [r7, #4]
	payload[0x0] = (0x1 << 4) + (min1_p & 0x0F);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3310      	adds	r3, #16
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <assemblePayload+0x68>)
 8001544:	701a      	strb	r2, [r3, #0]
	payload[0x1] = (0x2 << 4) + (seg1_p & 0x0F);
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3320      	adds	r3, #32
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <assemblePayload+0x68>)
 8001554:	705a      	strb	r2, [r3, #1]
	payload[0x2] = (0x3 << 4) + (seg2_p & 0x0F);
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3330      	adds	r3, #48	; 0x30
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <assemblePayload+0x68>)
 8001564:	709a      	strb	r2, [r3, #2]
	payload[0x3] = (0x4 << 4) + (decseg_p & 0x0F);
 8001566:	793b      	ldrb	r3, [r7, #4]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3340      	adds	r3, #64	; 0x40
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <assemblePayload+0x68>)
 8001574:	70da      	strb	r2, [r3, #3]
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bc90      	pop	{r4, r7}
 800157e:	4770      	bx	lr
 8001580:	2000008c 	.word	0x2000008c

08001584 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

	// check if the USART2 receive RCC_APB1Periph_USART2interrupt flag was set
	if (USART_GetITStatus(USART2, USART_IT_RXNE)) {
 8001588:	f240 5125 	movw	r1, #1317	; 0x525
 800158c:	4815      	ldr	r0, [pc, #84]	; (80015e4 <USART2_IRQHandler+0x60>)
 800158e:	f7ff fa43 	bl	8000a18 <USART_GetITStatus>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d022      	beq.n	80015de <USART2_IRQHandler+0x5a>
		switch (estado_crono) {
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <USART2_IRQHandler+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d018      	beq.n	80015d2 <USART2_IRQHandler+0x4e>
		case LOCAL:
			break;
		default:
			usart_buffer[usart_counter] = USART2->DR;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <USART2_IRQHandler+0x68>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <USART2_IRQHandler+0x60>)
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <USART2_IRQHandler+0x6c>)
 80015b2:	5499      	strb	r1, [r3, r2]
			usart_counter = (usart_counter + 1) % 4; // TODO : o buffer não precisa ter tamanho 4 (aliás, é melhor que seja maior)
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <USART2_IRQHandler+0x68>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	425a      	negs	r2, r3
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	bf58      	it	pl
 80015c8:	4253      	negpl	r3, r2
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <USART2_IRQHandler+0x68>)
 80015ce:	701a      	strb	r2, [r3, #0]
			break;
 80015d0:	e000      	b.n	80015d4 <USART2_IRQHandler+0x50>
			break;
 80015d2:	bf00      	nop
		}
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80015d4:	f240 5125 	movw	r1, #1317	; 0x525
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USART2_IRQHandler+0x60>)
 80015da:	f7ff fa77 	bl	8000acc <USART_ClearITPendingBit>
	}
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40004400 	.word	0x40004400
 80015e8:	20000078 	.word	0x20000078
 80015ec:	20000088 	.word	0x20000088
 80015f0:	2000004c 	.word	0x2000004c

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015f8:	4a15      	ldr	r2, [pc, #84]	; (8001650 <SystemInit+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <SystemInit+0x5c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001604:	4912      	ldr	r1, [pc, #72]	; (8001650 <SystemInit+0x5c>)
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <SystemInit+0x5c>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <SystemInit+0x60>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <SystemInit+0x5c>)
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <SystemInit+0x5c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <SystemInit+0x5c>)
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <SystemInit+0x5c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <SystemInit+0x5c>)
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <SystemInit+0x5c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001636:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SystemInit+0x5c>)
 800163a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800163e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001640:	f000 f80c 	bl	800165c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SystemInit+0x64>)
 8001646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164a:	609a      	str	r2, [r3, #8]
#endif 
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	f8ff0000 	.word	0xf8ff0000
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001660:	f000 f802 	bl	8001668 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001676:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <SetSysClockTo72+0xf8>)
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <SetSysClockTo72+0xf8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <SetSysClockTo72+0xf8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <SetSysClockTo72+0x38>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800169e:	d1f0      	bne.n	8001682 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <SetSysClockTo72+0xf8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80016ac:	2301      	movs	r3, #1
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	e001      	b.n	80016b6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d14b      	bne.n	8001754 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80016bc:	4a29      	ldr	r2, [pc, #164]	; (8001764 <SetSysClockTo72+0xfc>)
 80016be:	4b29      	ldr	r3, [pc, #164]	; (8001764 <SetSysClockTo72+0xfc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80016c8:	4a26      	ldr	r2, [pc, #152]	; (8001764 <SetSysClockTo72+0xfc>)
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <SetSysClockTo72+0xfc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80016d4:	4a23      	ldr	r2, [pc, #140]	; (8001764 <SetSysClockTo72+0xfc>)
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <SetSysClockTo72+0xfc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <SetSysClockTo72+0xf8>)
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <SetSysClockTo72+0xf8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <SetSysClockTo72+0xf8>)
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <SetSysClockTo72+0xf8>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <SetSysClockTo72+0xf8>)
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <SetSysClockTo72+0xf8>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <SetSysClockTo72+0xf8>)
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <SetSysClockTo72+0xf8>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001706:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <SetSysClockTo72+0xf8>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <SetSysClockTo72+0xf8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001712:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <SetSysClockTo72+0xf8>)
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <SetSysClockTo72+0xf8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001720:	bf00      	nop
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <SetSysClockTo72+0xf8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f9      	beq.n	8001722 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <SetSysClockTo72+0xf8>)
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <SetSysClockTo72+0xf8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 0303 	bic.w	r3, r3, #3
 8001738:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <SetSysClockTo72+0xf8>)
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <SetSysClockTo72+0xf8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001746:	bf00      	nop
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SetSysClockTo72+0xf8>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d1f9      	bne.n	8001748 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	40022000 	.word	0x40022000

08001768 <__libc_init_array>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	2500      	movs	r5, #0
 800176c:	4e0c      	ldr	r6, [pc, #48]	; (80017a0 <__libc_init_array+0x38>)
 800176e:	4c0d      	ldr	r4, [pc, #52]	; (80017a4 <__libc_init_array+0x3c>)
 8001770:	1ba4      	subs	r4, r4, r6
 8001772:	10a4      	asrs	r4, r4, #2
 8001774:	42a5      	cmp	r5, r4
 8001776:	d109      	bne.n	800178c <__libc_init_array+0x24>
 8001778:	f000 f81a 	bl	80017b0 <_init>
 800177c:	2500      	movs	r5, #0
 800177e:	4e0a      	ldr	r6, [pc, #40]	; (80017a8 <__libc_init_array+0x40>)
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <__libc_init_array+0x44>)
 8001782:	1ba4      	subs	r4, r4, r6
 8001784:	10a4      	asrs	r4, r4, #2
 8001786:	42a5      	cmp	r5, r4
 8001788:	d105      	bne.n	8001796 <__libc_init_array+0x2e>
 800178a:	bd70      	pop	{r4, r5, r6, pc}
 800178c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001790:	4798      	blx	r3
 8001792:	3501      	adds	r5, #1
 8001794:	e7ee      	b.n	8001774 <__libc_init_array+0xc>
 8001796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800179a:	4798      	blx	r3
 800179c:	3501      	adds	r5, #1
 800179e:	e7f2      	b.n	8001786 <__libc_init_array+0x1e>
 80017a0:	080017c8 	.word	0x080017c8
 80017a4:	080017c8 	.word	0x080017c8
 80017a8:	080017c8 	.word	0x080017c8
 80017ac:	080017cc 	.word	0x080017cc

080017b0 <_init>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	bf00      	nop
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr

080017bc <_fini>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr
